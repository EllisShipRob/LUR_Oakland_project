rename(NEAR_FID = OID_1)
foodtrucks <- read_csv(foodtrucksfile)
foodtrucks <- read_csv(foodtrucksfile)
foodtrucks
foodtrucks <- read_csv(foodtrucksfile) %>%#, stringsAsFactors = FALSE) %>%
select(-X1)
foodtrucks
foodtrucks <- read_csv(foodtrucksfile) %>%#, stringsAsFactors = FALSE) %>%
select(-X1) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"])
str
foodtrucks
foodtrucks <- read_csv(foodtrucksfile) %>%
select(-X1) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1)
foodtr
foodtrucks
invdistMaj <- read_csv(inversedistMAJfile %>%
select(-OID) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1)
##### rename all cells in each df, because of stupid 10 character thing #####
names <- colnames(read.csv("LURdf_good.csv"))
#####get rid of bad columns - covariates####
inds <- c(1,2,174,175,176,177,184,185,186, 192 ,193)##manually figured out which
for(ind in rev(inds)){
cf[[ind]] <- NULL
}
names <- names[2:length(names)]
oldnames <- colnames(cf)
cf <- cf %>% rename_at(vars(oldnames), function(x) names) #the renaming
##calculate means for each
cf_byCell <- cf %>%
group_by(NEAR_FID) %>%
summarise_all(funs(mean))
#### joining
cf_byCell <- left_join(cf_byCell, select(foodtrucks, which(str_detect(colnames(foodtrucks), pattern = "FoodTr|NEAR_FID"))), by = "NEAR_FID") #add food truck data!
cf_byCell <- left_join(cf_byCell, select(foodtrucks, which(str_detect(colnames(foodtrucks), pattern = "FoodTr|NEAR_FID"))), by = "NEAR_FID") #add food truck data!
## get rid of bad columns - data ####
inds_data <- c(1,2,27:33)##manually figured out which
for(ind in rev(inds_data)){
df[[ind]] <- NULL
}
colnames(df)[colnames(df) == 'OID_1'] <- 'NEAR_FID'
colnames(centroids)[colnames(centroids) == 'OID_1'] <- 'NEAR_FID'
### calculate some time stuff for the movile df ####
df$datesOnly <- as.POSIXct(strptime(as.character(df$Local_time), "%m/%d/%Y"))
df$datetime <- as.POSIXct(strptime(as.character(df$Local_time), "%m/%d/%Y %H:%M:%S")) ###time switch not right..
df_grouped <- df %>%
group_by(datesOnly, NEAR_FID) %>%
summarize(count = n(),
Lat = mean(Lat),
Lon = mean(Lon),
CO_20sMean = mean(CO_20sMean),
CO2_20sMea = mean(CO2_20sMea),
PN_20sMean = mean(PN_20sMean),
HROrg = mean(HROrg),
HRNH4 = mean(HRNH4),
HRSO4 = mean(HRSO4),
HRNO3 = mean(HRNO3),
HRChl = mean(HRChl),
HROrg44 = mean(HROrg44),
HROrg55 = mean(HROrg55),
C4H7 = mean(C4H7),
HROrg57 = mean(HROrg57),
C4H9 = mean(C4H9),
C6H10O = mean(C6H10O),
H_C = mean(H_C),
O_C = mean(O_C),
SVOOA = mean(SVOOA),
COA = mean(COA),
HOA = mean(HOA),
PM25ref = mean(PM25ref)
)
df_driveday <- df_grouped %>%
group_by(NEAR_FID) %>%
summarize(count = n(),
Lat = median(Lat),
Lon = median(Lon),
CO_20sMean = median(CO_20sMean),
CO2_20sMea = median(CO2_20sMea),
PN_20sMean = median(PN_20sMean),
HROrg = median(HROrg),
HRNH4 = median(HRNH4),
HRSO4 = median(HRSO4),
HRNO3 = median(HRNO3),
HRChl = median(HRChl),
HROrg44 = median(HROrg44),
HROrg55 = median(HROrg55),
C4H7 = median(C4H7),
HROrg57 = median(HROrg57),
C4H9 = median(C4H9),
C6H10O = median(C6H10O),
H_C = median(H_C),
O_C = median(O_C),
SVOOA = median(SVOOA),
COA = median(COA),
HOA = median(HOA),
PM25ref = median(PM25ref)
)
# df_driveday <- df_grouped %>%
#   group_by(NEAR_FID) %>%
#   summarize(count = n(),
#             Lat = mean(Lat),
#             Lon = mean(Lon),
#             CO_20sMean = mean(CO_20sMean),
#             CO2_20sMea = mean(CO2_20sMea),
#             PN_20sMean = mean(PN_20sMean),
#             HROrg = mean(HROrg),
#             HRNH4 = mean(HRNH4),
#             HRSO4 = mean(HRSO4),
#             HRNO3 = mean(HRNO3),
#             HRChl = mean(HRChl),
#             HROrg44 = mean(HROrg44),
#             HROrg55 = mean(HROrg55),
#             C4H7 = mean(C4H7),
#             HROrg57 = mean(HROrg57),
#             C4H9 = mean(C4H9),
#             C6H10O = mean(C6H10O),
#             H_C = mean(H_C),
#             O_C = mean(O_C),
#             SVOOA = mean(SVOOA),
#             COA = mean(COA),
#             HOA = mean(HOA),
#             PM25ref = mean(PM25ref)
#   )
#####import driveday-ed BC data#####
BCfile = "BlackCarbon_200m_driveday.csv"
BCdf_driveday <- read.csv(BCfile)
BCdf_driveday <- BCdf_driveday %>%
filter(NEAR_FID %in% unique(df_driveday$NEAR_FID)) %>%
mutate(BC = BC/1000) %>%
select(NEAR_FID,BC)
df_driveday <- merge(df_driveday,centroids,by=c("NEAR_FID"))
df_driveday <- merge(df_driveday,BCdf_driveday,by=c("NEAR_FID"))
df_driveday <- select(df_driveday, -c(Shape_Area, Shape_Leng, OID, Lat, Lon))
#####
IndepVarsList <- colnames(cf[ , 3:ncol(cf)])
IndepVarsList <- IndepVarsList [! IndepVarsList %in% "NEAR_FID"]
##### starting with inputs ####
df_LUR_input <- df_driveday
Sites_df <- cf_byCell
remove <- "HRChl"
measurementSpeciesforModel <- c("COA", "HOA", "BC" ,"SVOOA", "HRSO4")#,"HOA")
measurementSpeciesforModel <- measurementSpeciesforModel [! measurementSpeciesforModel %in% remove]
statStr <- ""
measurementSpeciesforModel_stat <- paste(measurementSpeciesforModel,statStr,sep="")
AddSpeciesAsDVs <- c("")
FoodTruckDVs <- colnames(x = foodtrucks)[which(str_detect(string = colnames(foodtrucks), pattern = "FoodTruckCount_250"))] #names of food truck variables
DropSpeciesAsDVs <- c("RestCount_100m","RestCount_500m","RestCount_50m","RestCount_1000m","RestCount_2500m")
IndepVarsforModel <- c(IndepVarsList,FoodTruckDVs) #which IVs are you using for fitting #EDIT#
alwaysKeep_DV = c("count","Latitude", "Longitude", "NEAR_FID")
alwaysKeep_IV = c("NEAR_FID")
Sites_df_temp <- subset(Sites_df, select = c(IndepVarsforModel,alwaysKeep_IV))
if(nchar(AddSpeciesAsDVs[1]) > 1){
Sites_df_temp <- merge(Sites_df_temp, subset(df_driveday, select = c(AddSpeciesAsDVs,"NEAR_FID")), by = "NEAR_FID")}
if(nchar(AddSpeciesAsDVs[1]) == 1){
Sites_df_temp <- merge(Sites_df_temp, subset(df_driveday, select = c("NEAR_FID")), by = "NEAR_FID")}
df_LUR_input <- merge(subset(df_LUR_input, select = c(alwaysKeep_DV,measurementSpeciesforModel)), Sites_df_temp, by = "NEAR_FID")
if(nchar(AddSpeciesAsDVs[1]) > 1){
IndepVarsforModel <- c(IndepVarsforModel ,AddSpeciesAsDVs, FoodTruckDVs)}
if(nchar(AddSpeciesAsDVs[1]) == 1){
IndepVarsforModel <- c(IndepVarsforModel,FoodTruckDVs)}
IndepVarsforModel <- IndepVarsforModel [! IndepVarsforModel %in% DropSpeciesAsDVs]
IndepVarsforModel
colnames(df_LUR_input)
# stepSeq <- seq(from = 0.1, to = 1, by = 0.1)
tots = 1
repeats <- seq(from = 1, to = tots, by = 1)
r2saves_goodMods <- r2saves_goodMods[0, ]
species <- "HOA"
dfmodelSaves <- data.frame(species=double(),
speciesModel=double(),
"NEAR_FID" = integer(),
"ModelInd" = double())
for(rep in repeats){
seq = 1
# for(seq in stepSeq){
reps = 1
drivedays = 3
df_LUR_input <- filter(df_LUR_input, count >= drivedays) #run this line to make starting point the 394 sites with drive days >15
df_LUR_input <- df_LUR_input[ ,colnames(unique(as.matrix(df_LUR_input), MARGIN=2))] #deal with columns that, for the subset, are identical
IndepVarsforModel <- Reduce(intersect, list(IndepVarsforModel, colnames(df_LUR_input))) #same as line above
sites = round(nrow(filter(df_LUR_input, count >= drivedays)) * seq) ##change equality if need be
saveString = "test1"
#### RUN LUR CODE ####
r2results <- replicate(reps,
run_LUR_all(df_LUR_input,
drivedays,
IndepVarsforModel,
measurementSpeciesforModel_stat,
measurementSpeciesforModel_stat,
sites,
saveString)
)
#### Match modeled conc. with sites, store in matrix ####
# df_LUR_output <- merge(df_LUR_output, Polygon_df, by = "NEAR_FID")
df_LUR_input_wModel <- df_LUR_input
for(ind in 1:length(measurementSpeciesforModel)){
print(paste("R2",AQmodels_sub[[ind]]$summary$r.squared,sep = " "))
formula = formula(AQmodels_sub[[ind]])
model = lm(formula, data = df_LUR_output)
print(formula)
print(seq)
df_LUR_output[paste(measurementSpeciesforModel_stat[ind], "model", sep = "_")] <- predict(model, data = df_LUR_output)
df_LUR_output[paste(measurementSpeciesforModel_stat[ind], "resid", sep = "_")] <- AQmodels_sub[[ind]]$summary$residuals
df_LUR_input_wModel[paste(measurementSpeciesforModel_stat[ind], "model", sep = "_")] <- predict(model, df_LUR_input_wModel)
}
}
invdistMaj <- read_csv(inversedistMAJfile) %>%
select(-OID) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1)
invdistMaj
foodtrucks
### additional variables added later: try to do import / cleaning all in one step w dplyr ###
foodtrucks <- read_csv(foodtrucksfile) %>%
select(-X1, Latitude, Longitude) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1)
foodtrucks
### additional variables added later: try to do import / cleaning all in one step w dplyr ###
foodtrucks <- read_csv(foodtrucksfile) %>%
select(-c(X1, Latitude, Longitude)) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1)
foodtrucks
invdistHwy
head(invdistHwy)
invdistHwy <- read.csv(inversedistHWYfile) %>%
select(-OID) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1,
InvDistHwy = MEAN_InvDi)
invdistMaj <- read_csv(inversedistMAJfile) %>%
select(-OID) %>%
filter(OID_1 %in% cf[ , "NEAR_FID"]) %>%
rename(NEAR_FID = OID_1,
InvDistMaj = MEAN_InvDi)
head(invdistHwy)
str(cf_byCell)
colnames(cf_byCell)
#### joining
cf_byCell <- left_join(cf_byCell, select(foodtrucks, which(str_detect(colnames(foodtrucks), pattern = "FoodTr|NEAR_FID"))), by = "NEAR_FID") #add food truck data!
colnames(cf_byCell)
##calculate means for each
cf_byCell <- cf %>%
group_by(NEAR_FID) %>%
summarise_all(funs(mean))
#### joining
cf_byCell <- left_join(cf_byCell, select(foodtrucks, which(str_detect(colnames(foodtrucks), pattern = "FoodTr|NEAR_FID"))), by = "NEAR_FID") #add food truck data!
colnames(cf_byCell)
cf_byCell <- left_join(cf_byCell, invdistHwy, by = "NEAR_FID")
colnames(cf_byCell)
cf_byCell <- left_join(cf_byCell, invdistMaj, by = "NEAR_FID")
colnames(cf_byCell)
##calculate means for each
cf_byCell <- as.tbl(cf) %>%
group_by(NEAR_FID) %>%
summarise_all(funs(mean))
#### joining
cf_byCell <- left_join(cf_byCell, foodtrucks, by = "NEAR_FID") #add food truck data!
cf_byCell
colnames(cf_byCell)
cf_byCell <- left_join(cf_byCell, invdistHwy, by = "NEAR_FID")
cf_byCell <- left_join(cf_byCell, invdistMaj, by = "NEAR_FID")
centroids <- read.csv(centroidsfile, stringsAsFactors = FALSE)
centroids
str(centroids)
centroidsfile <- "Fish_200m_select2.csv"
centroids <- read.csv(centroidsfile, stringsAsFactors = FALSE)
centroids
centroids <- read_csv(centroidsfile)
centroi
centroids
centroids <- filter(centroids, OID_1 %in% cf[ , "OID_2"])
centroids
str(cf)
colnames(cf)
covarsfile <- "Covariates_clip_200m.csv"
cf <- read.csv(covarsfile, stringsAsFactors = FALSE)
colnames(cf)
cf <- read_csv(covarsfile)
cf <- read_csv(covarsfile)
colnames(cf)
cf <- read_csv(covarsfile) %>%
select(-NEAR_FID) %>%
rename(NEAR_FID = OID2)
cf <- read_csv(covarsfile) %>%
select(-NEAR_FID) %>%
rename(NEAR_FID = OID_2)
colnames(cf)
length(unique(cf$NEAR_FID))
centroids <- read_csv(centroidsfile)
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude))
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1)
centroids
filter(NEAR_FID  %in% select(cf, NEAR_FID))
select(cf, NEAR_FID)
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID  %in% select(cf, NEAR_FID))
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% cf[ , "NEAR_FID"])
centroids
length(unique(cf$NEAR_FID))
length(unique(select(cf, NEAR_FID)))
select(cf, NEAR_FID)
unique(select(cf, NEAR_FID))
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% unique(select(cf, NEAR_FID)))
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1)
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(centroids, NEAR_FID %in% cf[ , "NEAR_FID"])
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(centroids, NEAR_FID %in% unique(cf[ , "NEAR_FID"]))
filter(centroids, NEAR_FID %in% cf[ , "NEAR_FID"])
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1)
centroids
cf <- read_csv(covarsfile)
unqiue(cf$OID_2
)
unqiue(cf$OID_2
)
unique(cf$OID_2)
cf <- read_csv(covarsfile) %>%
select(-NEAR_FID) %>%
rename(NEAR_FID = OID_2)
length(unique(cf$OID_2))
length(unique(cf$NEAR_FID))
length(cf$NEAR_FID)
cf <- read_csv(covarsfile) %>%
select(-NEAR_FID) %>%
rename(NEAR_FID = OID_2) %>%
drop_na(NEAR_FID)
length(cf$NEAR_FID)
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1)
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% cf[ , "NEAR_FID"])
centroids
centroids <- filter(centroids, NEAR_FID %in% cf[ , "NEAR_FID"])
centroids
unique(centroids$NEAR_FID)
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1)
unique(centroids$NEAR_FID)
centroids <- filter(centroids, NEAR_FID %in% cf[ , "NEAR_FID"])
centroids
cf %>% select(NEAR_FID)
cf %>% select(NEAR_FID) %>% unique()
cf <- read.csv(covarsfile, stringsAsFactors = FALSE) %>%
select(-NEAR_FID) %>%
rename(NEAR_FID = OID_2)
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% cf[ , "NEAR_FID"])
centroids
is.na(cf$NEAR_FID)
sum(is.na(cf$NEAR_FID))
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% select(cf, NEAR_FID))
sum(is.na(cf$NEAR_FID))
centroids
select(cf, NEAR_FID)
cf[ , "NEAR_FID"]
type(cf[ , "NEAR_FID"])
class(cf[ , "NEAR_FID"])
class(select(cf, NEAR_FID))
class(cf$NEAR_FID)
class(unique(select(cf, NEAR_FID)))
class(as.vector(select(cf, NEAR_FID)))
as.vector(select(cf, NEAR_FID))
as.integer(select(cf, NEAR_FID))
as.list(select(cf, NEAR_FID))
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% select(cf, NEAR_FID))
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% as.list(select(cf, NEAR_FID)))
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% as.list(select(cf, NEAR_FID)))
centroids
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% cf$NEAR_FID)
centroids
cf <- read_csv(covarsfile, stringsAsFactors = FALSE) %>% #not important cf as a tibble because
select(-NEAR_FID) %>%
rename(NEAR_FID = OID_2)
centroids <- read_csv(centroidsfile) %>%
select(c(OID_1, Latitude, Longitude)) %>%
rename(NEAR_FID = OID_1) %>%
filter(NEAR_FID %in% cf$NEAR_FID)
centroids
#### data files
datafile <- "Data_clip_200m.csv"
df <- read.csv(datafile, stringsAsFactors = FALSE)
sum(is.na(df$OID_1))
###only use cells where there are covariate data - filter unneeded
df <- df[complete.cases(df$OID_1), ]
sum(is.na(df$OID_1))
df <- read_csv(datafile) %>%
drop_na(OID1)
df <- read_csv(datafile) %>%
drop_na(OID_1)
sum(is.na(df$OID_1))
df <- read_csv(datafile)
sum(is.na(df$OID_1))
df <- read_csv(datafile) %>%
drop_na(OID_1) %>%
filter(OID_1 %in% cf$NEAR_FID)
unique(df$OID_1)
length(unique(df$OID_1))
colnames(df)
colnames(cf)
#####get rid of bad columns - covariates####
inds <- c(1,2,174,175,176,177,184,185,186, 192)##manually figured out which
for(ind in rev(inds)){
cf[[ind]] <- NULL
}
colnames(cf)
##### rename all cells in each df, because of stupid 10 character thing #####
names <- colnames(read.csv("LURdf_good.csv"))
names
names <- names[2:length(names)]
names <- names[2:length(names)]
##### rename all cells in each df, because of stupid 10 character thing #####
names <- colnames(read.csv("LURdf_good.csv"))
names <- names[2:length(names)]
names
length(names)
length(colnames(cf))
?rev
rev(inds_data)
df
colnames(df)
## get rid of bad columns - data ####
inds_data <- c(1,2,27:33) ##manually figured out which columns I dont want
for(ind in rev(inds_data)){
df[[ind]] <- NULL
}
colnames(df)
df <- read_csv(datafile) %>%
drop_na(OID_1) %>%
filter(OID_1 %in% cf$NEAR_FID) %>%
rename(NEAR_FID = OID_1)
inds_data <- c(1,2,27:33) ##manually figured out which columns I dont want
for(ind in rev(inds_data)){
df[[ind]] <- NULL
}
### calculate some time stuff for the movile df ####
df$datesOnly <- as.POSIXct(strptime(as.character(df$Local_time), "%m/%d/%Y"))
df$datetime <- as.POSIXct(strptime(as.character(df$Local_time), "%m/%d/%Y %H:%M:%S")) ###time switch not right..
colnames(df)
df$datetime
df
select(df, datetime)
df <- read_csv(datafile) %>%
drop_na(OID_1) %>%
filter(OID_1 %in% cf$NEAR_FID) %>%
rename(NEAR_FID = OID_1)
select(df, datetime)
colnames(df)
select(df, datetime)
## get rid of bad columns - data ####
inds_data <- c(1,2,27:33) ##manually figured out which columns I dont want
for(ind in rev(inds_data)){
df[[ind]] <- NULL
}
### calculate some time stuff for the movile df ####
df$datesOnly <- as.POSIXct(strptime(as.character(df$Local_time), "%m/%d/%Y"))
df$datetime <- as.POSIXct(strptime(as.character(df$Local_time), "%m/%d/%Y %H:%M:%S")) ###time switch not right..
select(df, datetime)
